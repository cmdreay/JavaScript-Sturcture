AMD简化了JS的模块化应用，但是因为它还不是浏览器端内置的机制，因此还是需要一些引导过程。好在写了一个加载器插件，它在优化后不到850个字符。
这个加载器要实现如下功能：
1、可以运行在当前任何流行的没有实现ES6的浏览器，例如Promises。
2、提供最基本的AMD方法：define和require。
3、被Uglify.js压缩后，应该尽可能的小，但是可读性要强。
4、能够被其他新的加载插件扩展
5、和require.js要保持兼容
为了验证加载器共走是否正常，设计了如下的单元测试用例：

    define('framework', ['component', 'library'], function(cmp, lib) {
		    return { init: 'initialized:\ncomponent: ' + cmp.description +
		        '\nand library: ' + lib.version};
		});
		
		require(['framework'], function(framework) {
		    assert(framework.init === 'initialized:\ncomponent: uses library version: 0.0.1\nand library: 0.0.1');
		});
		
		define('library', [], function() {
		    return { version: '0.0.1' };
		});
		
		define('component', ['library'], function(lib) {
		    return { description: 'uses library version: ' + lib.version };
		});
